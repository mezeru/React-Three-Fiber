{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["softShadows","CameraController","useThree","camera","gl","useEffect","controls","OrbitControls","domElement","minDistance","maxDistance","dispose","Mesh","pos","color","args","mesh","useRef","console","log","useFrame","current","rotation","x","y","useState","expand","setExpand","props","useSpring","scale","onClick","castShadow","position","ref","attach","App","shadowMap","colorManagement","fov","intensity","shadow-mapSize-width","shadow-mapSize-height","shadow-camera-far","shadow-camera-left","shadow-camera-right","shadow-camera-top","shadow-camera-bottom","receiveShadow","Math","PI","opacity","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mQAOAA,cAEA,IAAMC,EAAmB,WAAO,IAAD,EACNC,cAAfC,EADqB,EACrBA,OAAQC,EADa,EACbA,GAahB,OAZAC,qBACE,WACE,IAAMC,EAAW,IAAIC,IAAcJ,EAAQC,EAAGI,YAI9C,OAFAF,EAASG,YAAc,EACvBH,EAASI,YAAc,GAChB,WACLJ,EAASK,aAGb,CAACR,EAAQC,IAEJ,MAIHQ,EAAO,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,IAAIC,EAAe,EAAfA,MAAMC,EAAS,EAATA,KACjBC,EAAOC,iBAAO,MACpBC,QAAQC,IAAIH,GACZI,aAAS,kBAAOJ,EAAKK,QAAQC,SAASC,EAAIP,EAAKK,QAAQC,SAASE,GAAK,OAHrC,MAKLC,oBAAS,GALJ,mBAKzBC,EALyB,KAKlBC,EALkB,KAM1BC,EAAQC,oBAAU,CAACC,MAAQJ,EAAS,CAAC,IAAI,IAAI,KAAO,CAAC,EAAE,EAAE,GAAKJ,SAAWI,EAAS,CAAC,EAAE,EAAE,GAAK,CAAC,EAAE,EAAE,KAErG,OACE,eAAC,IAAEV,KAAH,CAAQe,QAAS,WAAOJ,GAAWD,IAAUJ,SAAUM,EAAMN,SAAUQ,MAAOF,EAAME,MAAOE,YAAU,EAACC,SAAUpB,EAAKqB,IAAKlB,EAA1H,UACE,mCAAmBmB,OAAO,WAAWpB,KAAMA,IAC3C,sCAAsBoB,OAAO,WAAWrB,MAAOA,QA0CxCsB,MAtCf,WAEE,OACE,mCACA,eAAC,IAAD,CAAQC,WAAS,EAACC,iBAAe,EAACnC,OAAQ,CAAC8B,SAAS,EAAE,EAAE,EAAE,IAAKM,IAAI,IAAnE,UACE,8BAAcC,UAAW,KAGzB,kCAAkBR,YAAU,EAACC,SAAU,CAAC,EAAE,GAAG,GAC7CO,UAAW,EACXC,uBAAsB,KACtBC,wBAAuB,KACvBC,oBAAmB,GACnBC,sBAAqB,GACrBC,sBAAqB,GACrBC,oBAAmB,GACnBC,wBAAuB,KAIvB,4BAAYd,SAAU,EAAE,GAAG,GAAG,IAAKO,UAAW,KAE9C,gCACE,uBAAMQ,eAAa,EAAC1B,SAAU,EAAE2B,KAAKC,GAAG,EAAE,EAAE,GAAIjB,SAAU,CAAC,GAAG,EAAE,GAAhE,UACE,qCAAqBE,OAAO,WAAWpB,KAAM,CAAC,IAAI,OAClD,gCAAgBoB,OAAO,WAAWgB,QAAS,UAI/C,cAAC,EAAD,CAAMtC,IAAK,CAAC,EAAE,EAAE,GAAIC,MAAM,WAAWC,KAAM,CAAC,EAAE,EAAE,KAChD,cAAC,EAAD,CAAMF,IAAK,EAAE,EAAE,GAAG,GAAIC,MAAM,cAC5B,cAAC,EAAD,CAAMD,IAAK,CAAC,EAAE,GAAG,GAAIC,MAAM,eAC3B,cAAC,EAAD,UC9DSsC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.7545192e.chunk.js","sourcesContent":["import './App.scss';\nimport {useRef,useState,useEffect} from 'react';\nimport {Canvas , useFrame,useThree} from 'react-three-fiber';\nimport {useSpring,a} from 'react-spring/three';\nimport {softShadows} from '@react-three/drei';\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\n\nsoftShadows();\n\nconst CameraController = () => {\n  const { camera, gl } = useThree();\n  useEffect(\n    () => {\n      const controls = new OrbitControls(camera, gl.domElement);\n\n      controls.minDistance = 3;\n      controls.maxDistance = 20;\n      return () => {\n        controls.dispose();\n      };\n    },\n    [camera, gl]\n  );\n  return null;\n};\n\n\nconst Mesh = ({pos,color,args})=> {\n  const mesh = useRef(null)\n  console.log(mesh)\n  useFrame(() => (mesh.current.rotation.x = mesh.current.rotation.y += 0.01));\n\n  const [expand,setExpand] = useState(false)\n  const props = useSpring({scale : expand ? [1.5,1.5,1.5] : [1,1,1] , rotation : expand ? [3,3,3] : [1,1,1] })\n\n    return(\n      <a.mesh onClick={() => {setExpand(!expand)}} rotation={props.rotation} scale={props.scale} castShadow position={pos} ref={mesh}>\n        <boxBufferGeometry attach=\"geometry\" args={args} />\n        <meshStandardMaterial attach=\"material\" color={color} />\n      </a.mesh>);\n}\n\nfunction App() {\n\n  return (\n    <>\n    <Canvas shadowMap colorManagement camera={{position:[-5,5,12], fov:30}}>\n      <ambientLight intensity={0.2} />\n\n\n      <directionalLight castShadow position={[0,10,0]} \n      intensity={1} \n      shadow-mapSize-width={1024} \n      shadow-mapSize-height={1024} \n      shadow-camera-far={50}\n      shadow-camera-left={-10}\n      shadow-camera-right={10}\n      shadow-camera-top={10}\n      shadow-camera-bottom={-10}\n      />\n\n\n      <pointLight position={[-10,0,-20]} intensity={0.6} />\n\n      <group>\n        <mesh receiveShadow rotation={[-Math.PI/2,0,0]} position={[0,-3,0]} > \n          <planeBufferGeometry attach='geometry' args={[100,100]} />\n          <shadowMaterial attach=\"material\" opacity={0.5} />\n        </mesh>\n      </group>\n\n      <Mesh pos={[0,1,0]} color=\"lightred\" args={[3,2,1]} />\n      <Mesh pos={[-2,1,-5]} color=\"lightblue\" />\n      <Mesh pos={[5,1,-2]} color=\"lightgreen\" />\n      <CameraController />\n    </Canvas>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}